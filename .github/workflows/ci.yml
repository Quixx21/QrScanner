name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache Poetry and pip deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install Poetry
        run: pip install poetry

      - name: Install Python dependencies
        run: poetry install --no-root

      - name: Run Python linters
        run: poetry run black --check .

      - name: Start backend server
        run: | 
          poetry run uvicorn qrscanner.web:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -v http://localhost:8000 || true
      - name: Wait for backend
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8000/health; then
              echo "Backend is up!"
              exit 0
            fi
            echo "Waiting for backend..."
            sleep 3
          done
          exit 1

      - name: Run backend tests
        run: poetry run pytest -v

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: qrscanner-web/package-lock.json

      - name: Cache npm deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('qrscanner-web/package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install frontend deps
        working-directory: qrscanner-web
        run: npm ci

      - name: Install Playwright browsers
        working-directory: qrscanner-web
        run: npx playwright install --with-deps

      - name: Build frontend
        working-directory: qrscanner-web
        run: npm run build

      - name: Start frontend
        working-directory: qrscanner-web
        run: nohup npm run start &

      - name: Run Playwright tests
        working-directory: qrscanner-web
        run: npx playwright test

      - name: Run Newman tests
        run: |
          npm install -g newman
          newman run postman/qrscanner.postman_collection.json -e postman/qrscanner.postman_environment.json

  docker:
    runs-on: ubuntu-latest
    needs: lint-test-build
    steps:
      - uses: actions/checkout@v4
      - name: Build backend Docker image
        run: docker build -t quixx21/qrscanner-backend:latest -f backend.Dockerfile .
      - name: Build frontend Docker image
        run: docker build -t quixx21/qrscanner-frontend:latest -f frontend.Dockerfile ./qrscanner-web
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Push images
        run: |
          docker push quixx21/qrscanner-backend:latest
          docker push quixx21/qrscanner-frontend:latest

  notify:
    runs-on: ubuntu-latest
    needs: [lint-test-build, docker]
    if: always()
    steps:
      - name: message to telegram (success)
        if: ${{ needs.lint-test-build.result == 'success' && needs.docker.result == 'success' }}
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d text="✅ CI/CD success for ${{ github.repository }} (commit: ${{ github.sha }})."
      - name: message to telegram (failure)
        if: ${{ needs.lint-test-build.result != 'success' || needs.docker.result != 'success' }}
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d text="❌ CI/CD failed in ${{ github.repository }} (commit: ${{ github.sha }})."
