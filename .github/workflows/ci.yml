name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --no-root
      - name: Run linters
        run: poetry run black --check .
      - name: Run backend server
        run: |
              nohup poetry run uvicorn qrscanner.web:app --host 0.0.0.0 --port 8000 &
              sleep 5
      - name: Run backend tests
        run: poetry run pytest -v
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install frontend deps
        working-directory: qrscanner-web
        run: npm install
      - name: Run frontend lint
        working-directory: qrscanner-web
        run: npm run lint
      - name: Run Playwright tests
        working-directory: qrscanner-web
        run: npx playwright test
      - name: Run Newman tests
        run: |
          npm install -g newman
          newman run postman/qrscanner.postman_collection.json -e postman/qrscanner.postman_environment.json

  docker:
    runs-on: ubuntu-latest
    needs: lint-test-build
    steps:
      - uses: actions/checkout@v4
      - name: Build backend Docker image
        run: docker build -t quixx21/qrscanner-backend:latest -f backend.Dockerfile .
      - name: Build frontend Docker image
        run: docker build -t quixx21/qrscanner-frontend:latest -f frontend.Dockerfile ./qrscanner-web
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Push images
        run: |
          docker push quixx21/qrscanner-backend:latest
          docker push quixx21/qrscanner-frontend:latest

  notify:
    runs-on: ubuntu-latest
    needs: [lint-test-build, docker]
    if: always()
    steps:
      - name: message to telegram (success)
        if: ${{ needs.lint-test-build.result == 'success' && needs.docker.result == 'success' }}
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d text="✅ CI/CD success for ${{ github.repository }} (commit: ${{ github.sha }})."
      - name: message to telegram (failure)
        if: ${{ needs.lint-test-build.result != 'success' || needs.docker.result != 'success' }}
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d text="❌ CI/CD failed in ${{ github.repository }} (commit: ${{ github.sha }})."
